repeat wait() until game:IsLoaded()
game:GetService("StarterGui"):SetCore("SendNotification",{
	Title = "Perfectus Hub", -- Required
	Text = "Loading Hub", -- Required
	Icon = "rbxassetid://14887567417" -- Optional
})
wait(0.1)

    getgenv().AutoSaveSettings = {
        Mode = "",
        Teleport = false,
        Attack = false,
        Click = false,
        Collects = false,
        FarmQuests = false,
        AutoTeleportRaid  = false,
        AutoTeleportRaidRumbling = false,
        AutoFarmRaidNamek = false,
        AutoFarmRaidRumbling = false,

    }

local mainimg = "rbxassetid://7539983773"
local openimg = "rbxassetid://9194077649"
local guiimg = "rbxassetid://4458888115"
local dungeonimg = "rbxassetid://6730262023"
local teleportimg = "rbxassetid://6723742952"
local universalimg = "rbxassetid://10885655986"
local perfectuslogo = "rbxassetid://14887567417"
local farmingimg = "rbxassetid://7485051715"
local statsimg = "rbxassetid://14377123173"
local settingimg = "rbxassetid://11446835336"
local discordimg = "rbxassetid://1461403871"

local cworld = game.Players.LocalPlayer.World.Value

local perfectushub = loadstring(game:HttpGet(('https://raw.githubusercontent.com/Binintrozza/GUI-SCRIPT/main/GUI_NEW.lua')))()

if game.PlaceId == 14433762945 then
    
    local MarketplaceService = game:GetService("MarketplaceService")

    local placeName = MarketplaceService:GetProductInfo(game.PlaceId).Name
    
    local Window = perfectushub:MakeWindow({Name = "Perfectus Hub      "..placeName, HidePremium = false, SaveConfig = true, IntroEnabled = true, IntroText = "Perfectus Hub", IntroIcon = "rbxassetid://14887567417",Intro ="rbxassetid://14887567417" , ConfigFolder = "Perfectus hub"})
    
    local Welcome = Window:MakeTab({
        Name = "Welcome",
        Icon = statsimg,
        PremiumOnly = false
    }) 

    local Main = Window:MakeTab({
        Name = "Main",
        Icon = mainimg,
        PremiumOnly = false
    }) 
   

local HS = game:GetService("HttpService")
local RS = game:GetService("ReplicatedStorage")
local WS = game:GetService("Workspace")
local P = game:GetService("Players")
local VU = game:GetService("VirtualUser")
local VIM = game:GetService("VirtualInputManager")
local RunS = game:GetService("RunService")
local TS = game:GetService("TweenService")
local httpRequest = (syn and syn.request) or http_request or request or (http and http.request) or nil
local player = P.LocalPlayer
local originalCameraZoomDistance = player.CameraMaxZoomDistance
local character = player.Character
local BINDABLE = RS.Bindable
local REMOTE = RS.Remote
local clickmodule = require(game:GetService("Players").LocalPlayer.PlayerGui.MainGui.MainGuiHandler.HUD.BottomButtons.Clicker)
local ultimodule = game:GetService("Players").LocalPlayer.PlayerGui.MainGui.HUD.BottomButtons.AbilityButton
local IGNORED_WORLDS = {"Raid","Tower"}
local worldData = require(RS.ModuleScripts.Config.WorldData)
local client = game.Players.LocalPlayer
local workspace = workspace
local huge = math.huge

local HumanoidRootPart = player.Character:WaitForChild("HumanoidRootPart")

local ChildAdded = false
--hatch 
local mobs = {}
_G.disabled = false
function getTarget(name, world)
		local enemies = WS.Worlds[world].Enemies
		for _, enemy in ipairs(enemies:GetChildren()) do
			if  enemy.Name == name and enemy:FindFirstChild("HumanoidRootPart") then
				return enemy
			end
		end
	end

    function getMobs()
        for _, enemy in ipairs(WS.Worlds[player.World.Value].Enemies:GetChildren()) do
            if not table.find(mobs, enemy.Name) then
                table.insert(mobs, enemy.Name)
            end
        end

        return mobs
    end
	function retreat()
        VIM:SendKeyEvent(true,"R",false,game)
    end
    	function cagans()
        VIM:SendKeyEvent(true,"E",false,game)
    end
	function init()
		getMobs()
	end
	init()
task.spawn(function()
	while not _G.disabled do
		if autofarm1 and selectedMob then
			local cWorld = player.World.Value
			local target = getTarget(selectedMob,cWorld)
			local enemySpawns = WS.Worlds[cWorld].Enemies
			local enemyModels = WS.Worlds[cWorld].Enemies:GetChildren()

			if target ~= nil and target:FindFirstChild("Attackers") then
				local enemySpawn

				for _, spawn in ipairs(enemySpawns:GetChildren()) do
					if spawn == target then
						enemySpawn = spawn

						break
					end
				end

				if enemySpawn ~= nil then
					if Teleport then
					character.HumanoidRootPart.CFrame = target.HumanoidRootPart.CFrame
					end
					repeat
						if target ~= nil and target:WaitForChild("Attackers") and table.find(enemyModels, target)  and #target:WaitForChild("Attackers"):GetChildren() == 0 then
							BINDABLE.Pets.SendAllPets:Fire(target, true)
						end

						task.wait()
					until _G.disabled
					or player.World.Value ~= cWorld
					or target == nil
					or target:FindFirstChild("Attackers") == nil
					or not autofarm1

					retreat()
				end
			end

			table.clear(enemyModels)
			ememyModels = nil
		elseif autofarm1 and not selectedMob then
			print ("Select mob first")
			task.wait(5)
		end

		task.wait(1)
	end
	Teleport = nil
	autofarm1 = nil
	selectedMob = nil
end)
        --coin/drops
        task.spawn(function()
            while not _G.disabled do
                if autoCollect then
                    for _, v in ipairs(WS.Effects:GetDescendants()) do
                        if v.Name == "CurrencyDrop" then
                            v.CFrame = character.HumanoidRootPart.CFrame
                        end
						if v.Name == "ImageDrop" then
                            v.CFrame = character.HumanoidRootPart.CFrame
                        end
                    end
                end

                task.wait()
            end

            autoCollect = nil
        end)
		task.spawn(function()
            while not _G.disabled do
                if autoclick then
					clickmodule:AttemptClick()
                end

                task.wait()
            end

            autoclick = nil
        end)

        
		task.spawn(function()
            while not _G.disabled do
                if autosummon then
					REMOTE.Orbs.OpenOrbs:FireServer(eggchecker,1)
                end

                task.wait()
            end
			eggchecker = nil
            autosummon = nil
        end)




    Welcome:AddLabel("Welcome "..game.Players.LocalPlayer.DisplayName)
    
    local Time = Welcome:AddLabel("Server Time")
    function UpdateTime()
    local GameTime = math.floor(workspace.DistributedGameTime+0.5)
    local Hour = math.floor(GameTime/(60^2))%24
    local Minute = math.floor(GameTime/(60^1))%60
    local Second = math.floor(GameTime/(60^0))%60
    Time:Set("Game Time : Hours : "..Hour.." Minutes : "..Minute.." Seconds : "..Second)
    end
    
    spawn(function()
    while task.wait() do
    pcall(function()
    UpdateTime()
    end)
    end
    end)
    
    Client = Welcome:AddLabel("Client")
    
    function UpdateClient()
    local Fps = workspace:GetRealPhysicsFPS()
    Client:Set("Fps : "..Fps)
    end
    
    spawn(function()
    while true do wait(.1)
    UpdateClient()
    end
    end)
    
    Client1 = Welcome:AddLabel("Client")
    
    function UpdateClient1()
    local Ping = game:GetService("Stats").Network.ServerStatsItem["Data Ping"]:GetValueString()
    Client1:Set("Ping : "..Ping)
    end
    
    spawn(function()
    while true do wait(.1)
    UpdateClient1()
    end
    end)
    
    local Thanksforreport = Welcome:AddLabel("Report Bug")

    local ReportBugs = nil
    Welcome:AddTextbox({
	Name = "Text Report Bug",
	Default = "Here",
	TextDisappear = false,
	Callback = function(value)
	ReportBugstext = value
	end	  
})
    
   
    local url = "https://discord.com/api/webhooks/1157214783897096202/wp7MmLOgCDCacfmm8R90V3t0EiWpCKZc5RkD67ZlasLg0xfS4QB6aqnANXzSAMXT1e72"
    Welcome:AddButton({
	Name = "Enter",
	Callback = function()
       Thanksforreport:Set("Thank You For Reported Bugs")
        wait(5)
        Thanksforreport:Set("Report Bug")
    local data = {
        ["username"] = 'Perfectus',
        ['content'] = '',
        ["avatar_url"] = "",
        ["embeds"] = {
            {
                ["description"] = "**Bug Reporting Webhook**",
                ["color"] = tonumber(255), -- color id		
                ["type"] = "rich",
                ["fields"] =  {
                    {
                        ["name"] = "Hwid",
                        ["value"] = '```lua'..'\n'..game:GetService("RbxAnalyticsService"):GetClientId()..'\n```',
                    },
                    {
                        ["name"] = "Username",
                        ["value"] = '```lua'..'\n'..game.Players.LocalPlayer.Name..'\n```',
                        ["inline"] = true
                    },
                    {
                        ["name"] = "Display Name",
                        ["value"] = '```lua'..'\n'..game.Players.LocalPlayer.DisplayName..'\n```',
                        ["inline"] = true
                    },
                    {
                        ["name"] = "Reported Bug",
                        ["value"] = '```lua'..'\n'..ReportBugstext..'\n```',
                        ["inline"] = false
                    }
                },
                ["footer"] = {
                    ["text"] = "Reported Bug",
                },
                ["timestamp"] = DateTime.now():ToIsoDate(),
            }
        },
    }
    local newdata = game:GetService("HttpService"):JSONEncode(data)
    local headers = {["content-type"] = "application/json"}
    request = http_request or request or HttpPost or syn.request
    local abcdef = {Url = url, Body = newdata, Method = "POST", Headers = headers}
    request(abcdef)
    
    end,
})

Main:AddSection({
    Name = "Current World"
})

    www = Main:AddLabel("World")
    
    function UpdateClient10()
    local ww = game.Players.LocalPlayer.World.Value
    www:Set("World : "..ww)
    end
    
    spawn(function()
    while true do wait(.1)
    UpdateClient10()
    end
    end)

Main:AddSection({
    Name = " Auto Farm"
})

local Dropdown = Main:AddDropdown({
    Name = "Select Enemy To Farm",
    Default = false,
    Save = true,
    Flag = "Select Enemy To Farm",
    Options = mobs,
    Callback = function(value)
        selectedMob = value
    end
})

 Main:AddButton({
    Name = "Refresh Enemy List",
    Callback = function()
        selectedMob = nil
        mobs = {}
        mobs = getMobs()
        Dropdown:Refresh(mobs,true)
        Dropdown:Set(false)
    end
})
Main:AddToggle({
    Name = "Auto Farm Selected Mob (req:Teleport Toggle)",
    Default = false,
    Save = true,
    Flag = "AUTO FARM tp Mob Select",
    Callback = function(toggleState)
        autofarm1=toggleState
    end
})
Main:AddToggle({
    Name = "Teleport to Mob",
    Default = false,
    Save = true,
    Flag = "AUTO FARM tp Mob Select",
    Callback = function(toggleState)
        Teleport=toggleState
    end
})

local function getClosestMob3()
    local dist, thing = math.huge
    for i, v in next, game:GetService("Workspace").Worlds[client.World.Value].Enemies:GetDescendants() do
        if v.Name == "HumanoidRootPart" then
            local mag = (game.Players.LocalPlayer.Character.HumanoidRootPart.Position - v.Position).magnitude
            if mag < dist then
                dist = mag
                thing = v
            end
        end
    end
    if thing then
        return thing
    else
        return nil
    end
end
Main:AddToggle({
    Name = "Auto Tween Mob Area (Open Auto Attack Gamepass)",
    Default = false,
    Save = true,
    Callback = function(Value)
        bass = Value
        while bass do
            task.wait()
            repeat
                task.wait()
            until game.Players.LocalPlayer.Character ~= nil
            local mobass = getClosestMob3()
            if mobass then
                local tweenInfo = TweenInfo.new(0.1, Enum.EasingStyle.Linear, Enum.EasingDirection.Out)
                local tween = game:GetService("TweenService"):Create(game.Players.LocalPlayer.Character.HumanoidRootPart, tweenInfo, {CFrame = mobass.CFrame * CFrame.new(0,0,7)})
                tween:Play()
            end
        end
    end,
})
Main:AddSection({
    Name = "Features"
})
local autclick = Main:AddToggle({
    Name = "Auto Click / Ulti",
    Default = false,
    Save = true,
    Flag = "AUTO CLICK",
    Callback = function(toggleState)
        autoclick = toggleState
        while aulti do wait(0.5)
        firesignal(client.PlayerGui.MainGui.HUD.BottomButtons.AbilityButton.Activated)
        end
    end
})

Main:AddToggle({
    Name = "Auto Collect",
    Default = false,
    Save = true,
    Flag = "AUTO Collect",
    Callback = function(toggleState)
        autoCollect=toggleState
    end
})
Main:AddSection({		
    Name = "Quest"
})
local qworld = {}
for _,v in pairs(game:GetService("ReplicatedStorage").UnloadedWorlds:GetChildren()) do
    table.insert(qworld,v.Name)
end

local questworld
Main:AddDropdown({
	Name = "Select to World",
	Options = qworld,
	Callback = function(Option)
        questworld = Option
	end,
})

local autoClaim
Main:AddToggle({
    Name = "Auto Claim Quest (not accept)",
    Default = false,
    Save = true,
    Flag = "AUTO Collect",
    Callback = function(val)
    autoClaim = val
        if val then
            spawn(function()
                autoClaim_func()
            end)
        end
    end
})

function autoClaim_func()
    spawn(function()
        while wait(0.3) and autoClaim do
local args = {
[1] = questworld.."Quest"
}

game:GetService("ReplicatedStorage").Remote.Data.CompleteQuest:FireServer(unpack(args))
        end
    end)
end

Main:AddSection({		
    Name = "Spirit"
})


Main:AddToggle({
    Name = "Normal Spirit Farm",
    Callback = function(Value)
     spiritfarm = Value
        while spiritfarm do task.wait()
game:GetService("ReplicatedStorage").Remote.Drops.CaughtSpirit:FireServer()
local args = {[1] = "TalentToken",[2] = 1}game:GetService("ReplicatedStorage").Remote.Drops.Items:FireServer(unpack(args))        
        end
    end
})    
Main:AddToggle({
    Name = "Inf Spirit Farm",
    Callback = function(Value)
     spiritfarm2 = Value
        while spiritfarm2 do task.wait(0.1)
local args = {[1] = "OnePiece"}game:GetService("ReplicatedStorage").Remote.Player.Teleport:FireServer(unpack(args))
game:GetService("ReplicatedStorage").Remote.Drops.CaughtSpirit:FireServer()
game:GetService("ReplicatedStorage").Remote.Drops.CaughtSpirit:FireServer()
game:GetService("ReplicatedStorage").Remote.Drops.CaughtSpirit:FireServer()
game:GetService("ReplicatedStorage").Remote.Drops.CaughtSpirit:FireServer()
game:GetService("ReplicatedStorage").Remote.Drops.CaughtSpirit:FireServer()

local args = {[1] = "TalentToken",[2] = 1}game:GetService("ReplicatedStorage").Remote.Drops.Items:FireServer(unpack(args))
local args = {[1] = "TalentToken",[2] = 1}game:GetService("ReplicatedStorage").Remote.Drops.Items:FireServer(unpack(args))
local args = {[1] = "TalentToken",[2] = 1}game:GetService("ReplicatedStorage").Remote.Drops.Items:FireServer(unpack(args))
local args = {[1] = "TalentToken",[2] = 1}game:GetService("ReplicatedStorage").Remote.Drops.Items:FireServer(unpack(args))
local args = {[1] = "TalentToken",[2] = 1}game:GetService("ReplicatedStorage").Remote.Drops.Items:FireServer(unpack(args))
local args = {[1] = "TalentToken",[2] = 1}game:GetService("ReplicatedStorage").Remote.Drops.Items:FireServer(unpack(args))
local args = {[1] = "TalentToken",[2] = 1}game:GetService("ReplicatedStorage").Remote.Drops.Items:FireServer(unpack(args))
local args = {[1] = "TalentToken",[2] = 1}game:GetService("ReplicatedStorage").Remote.Drops.Items:FireServer(unpack(args))
local args = {[1] = "TalentToken",[2] = 1}game:GetService("ReplicatedStorage").Remote.Drops.Items:FireServer(unpack(args))
local args = {[1] = "TalentToken",[2] = 1}game:GetService("ReplicatedStorage").Remote.Drops.Items:FireServer(unpack(args))

wait(0.5)
local args = {[1] = "MHA"}game:GetService("ReplicatedStorage").Remote.Player.Teleport:FireServer(unpack(args))
game:GetService("ReplicatedStorage").Remote.Drops.CaughtSpirit:FireServer()
game:GetService("ReplicatedStorage").Remote.Drops.CaughtSpirit:FireServer()
game:GetService("ReplicatedStorage").Remote.Drops.CaughtSpirit:FireServer()
game:GetService("ReplicatedStorage").Remote.Drops.CaughtSpirit:FireServer()
game:GetService("ReplicatedStorage").Remote.Drops.CaughtSpirit:FireServer()

local args = {[1] = "TalentToken",[2] = 1}game:GetService("ReplicatedStorage").Remote.Drops.Items:FireServer(unpack(args))
local args = {[1] = "TalentToken",[2] = 1}game:GetService("ReplicatedStorage").Remote.Drops.Items:FireServer(unpack(args))
local args = {[1] = "TalentToken",[2] = 1}game:GetService("ReplicatedStorage").Remote.Drops.Items:FireServer(unpack(args))
local args = {[1] = "TalentToken",[2] = 1}game:GetService("ReplicatedStorage").Remote.Drops.Items:FireServer(unpack(args))
local args = {[1] = "TalentToken",[2] = 1}game:GetService("ReplicatedStorage").Remote.Drops.Items:FireServer(unpack(args))
local args = {[1] = "TalentToken",[2] = 1}game:GetService("ReplicatedStorage").Remote.Drops.Items:FireServer(unpack(args))
local args = {[1] = "TalentToken",[2] = 1}game:GetService("ReplicatedStorage").Remote.Drops.Items:FireServer(unpack(args))
local args = {[1] = "TalentToken",[2] = 1}game:GetService("ReplicatedStorage").Remote.Drops.Items:FireServer(unpack(args))
local args = {[1] = "TalentToken",[2] = 1}game:GetService("ReplicatedStorage").Remote.Drops.Items:FireServer(unpack(args))
local args = {[1] = "TalentToken",[2] = 1}game:GetService("ReplicatedStorage").Remote.Drops.Items:FireServer(unpack(args))

wait(0.5)
local args = {[1] = "Naruto"}game:GetService("ReplicatedStorage").Remote.Player.Teleport:FireServer(unpack(args))
game:GetService("ReplicatedStorage").Remote.Drops.CaughtSpirit:FireServer()
game:GetService("ReplicatedStorage").Remote.Drops.CaughtSpirit:FireServer()
game:GetService("ReplicatedStorage").Remote.Drops.CaughtSpirit:FireServer()
game:GetService("ReplicatedStorage").Remote.Drops.CaughtSpirit:FireServer()
game:GetService("ReplicatedStorage").Remote.Drops.CaughtSpirit:FireServer()

local args = {[1] = "TalentToken",[2] = 1}game:GetService("ReplicatedStorage").Remote.Drops.Items:FireServer(unpack(args))
local args = {[1] = "TalentToken",[2] = 1}game:GetService("ReplicatedStorage").Remote.Drops.Items:FireServer(unpack(args))
local args = {[1] = "TalentToken",[2] = 1}game:GetService("ReplicatedStorage").Remote.Drops.Items:FireServer(unpack(args))
local args = {[1] = "TalentToken",[2] = 1}game:GetService("ReplicatedStorage").Remote.Drops.Items:FireServer(unpack(args))
local args = {[1] = "TalentToken",[2] = 1}game:GetService("ReplicatedStorage").Remote.Drops.Items:FireServer(unpack(args))
local args = {[1] = "TalentToken",[2] = 1}game:GetService("ReplicatedStorage").Remote.Drops.Items:FireServer(unpack(args))
local args = {[1] = "TalentToken",[2] = 1}game:GetService("ReplicatedStorage").Remote.Drops.Items:FireServer(unpack(args))
local args = {[1] = "TalentToken",[2] = 1}game:GetService("ReplicatedStorage").Remote.Drops.Items:FireServer(unpack(args))
local args = {[1] = "TalentToken",[2] = 1}game:GetService("ReplicatedStorage").Remote.Drops.Items:FireServer(unpack(args))
local args = {[1] = "TalentToken",[2] = 1}game:GetService("ReplicatedStorage").Remote.Drops.Items:FireServer(unpack(args))

wait(0.5)
local args = {[1] = "DBZ"}game:GetService("ReplicatedStorage").Remote.Player.Teleport:FireServer(unpack(args))
game:GetService("ReplicatedStorage").Remote.Drops.CaughtSpirit:FireServer()
game:GetService("ReplicatedStorage").Remote.Drops.CaughtSpirit:FireServer()
game:GetService("ReplicatedStorage").Remote.Drops.CaughtSpirit:FireServer()
game:GetService("ReplicatedStorage").Remote.Drops.CaughtSpirit:FireServer()
game:GetService("ReplicatedStorage").Remote.Drops.CaughtSpirit:FireServer()

local args = {[1] = "TalentToken",[2] = 1}game:GetService("ReplicatedStorage").Remote.Drops.Items:FireServer(unpack(args))
local args = {[1] = "TalentToken",[2] = 1}game:GetService("ReplicatedStorage").Remote.Drops.Items:FireServer(unpack(args))
local args = {[1] = "TalentToken",[2] = 1}game:GetService("ReplicatedStorage").Remote.Drops.Items:FireServer(unpack(args))
local args = {[1] = "TalentToken",[2] = 1}game:GetService("ReplicatedStorage").Remote.Drops.Items:FireServer(unpack(args))
local args = {[1] = "TalentToken",[2] = 1}game:GetService("ReplicatedStorage").Remote.Drops.Items:FireServer(unpack(args))
local args = {[1] = "TalentToken",[2] = 1}game:GetService("ReplicatedStorage").Remote.Drops.Items:FireServer(unpack(args))
local args = {[1] = "TalentToken",[2] = 1}game:GetService("ReplicatedStorage").Remote.Drops.Items:FireServer(unpack(args))
local args = {[1] = "TalentToken",[2] = 1}game:GetService("ReplicatedStorage").Remote.Drops.Items:FireServer(unpack(args))
local args = {[1] = "TalentToken",[2] = 1}game:GetService("ReplicatedStorage").Remote.Drops.Items:FireServer(unpack(args))
local args = {[1] = "TalentToken",[2] = 1}game:GetService("ReplicatedStorage").Remote.Drops.Items:FireServer(unpack(args))

wait(0.5)
local args = {[1] = "DemonSlayer"}game:GetService("ReplicatedStorage").Remote.Player.Teleport:FireServer(unpack(args))
game:GetService("ReplicatedStorage").Remote.Drops.CaughtSpirit:FireServer()
game:GetService("ReplicatedStorage").Remote.Drops.CaughtSpirit:FireServer()
game:GetService("ReplicatedStorage").Remote.Drops.CaughtSpirit:FireServer()
game:GetService("ReplicatedStorage").Remote.Drops.CaughtSpirit:FireServer()
game:GetService("ReplicatedStorage").Remote.Drops.CaughtSpirit:FireServer()

local args = {[1] = "TalentToken",[2] = 1}game:GetService("ReplicatedStorage").Remote.Drops.Items:FireServer(unpack(args))
local args = {[1] = "TalentToken",[2] = 1}game:GetService("ReplicatedStorage").Remote.Drops.Items:FireServer(unpack(args))
local args = {[1] = "TalentToken",[2] = 1}game:GetService("ReplicatedStorage").Remote.Drops.Items:FireServer(unpack(args))
local args = {[1] = "TalentToken",[2] = 1}game:GetService("ReplicatedStorage").Remote.Drops.Items:FireServer(unpack(args))
local args = {[1] = "TalentToken",[2] = 1}game:GetService("ReplicatedStorage").Remote.Drops.Items:FireServer(unpack(args))
local args = {[1] = "TalentToken",[2] = 1}game:GetService("ReplicatedStorage").Remote.Drops.Items:FireServer(unpack(args))
local args = {[1] = "TalentToken",[2] = 1}game:GetService("ReplicatedStorage").Remote.Drops.Items:FireServer(unpack(args))
local args = {[1] = "TalentToken",[2] = 1}game:GetService("ReplicatedStorage").Remote.Drops.Items:FireServer(unpack(args))
local args = {[1] = "TalentToken",[2] = 1}game:GetService("ReplicatedStorage").Remote.Drops.Items:FireServer(unpack(args))
local args = {[1] = "TalentToken",[2] = 1}game:GetService("ReplicatedStorage").Remote.Drops.Items:FireServer(unpack(args))

wait(0.5)
local args = {[1] = "Jojo"}game:GetService("ReplicatedStorage").Remote.Player.Teleport:FireServer(unpack(args))
game:GetService("ReplicatedStorage").Remote.Drops.CaughtSpirit:FireServer()
game:GetService("ReplicatedStorage").Remote.Drops.CaughtSpirit:FireServer()
game:GetService("ReplicatedStorage").Remote.Drops.CaughtSpirit:FireServer()
game:GetService("ReplicatedStorage").Remote.Drops.CaughtSpirit:FireServer()
game:GetService("ReplicatedStorage").Remote.Drops.CaughtSpirit:FireServer()

local args = {[1] = "TalentToken",[2] = 1}game:GetService("ReplicatedStorage").Remote.Drops.Items:FireServer(unpack(args))
local args = {[1] = "TalentToken",[2] = 1}game:GetService("ReplicatedStorage").Remote.Drops.Items:FireServer(unpack(args))
local args = {[1] = "TalentToken",[2] = 1}game:GetService("ReplicatedStorage").Remote.Drops.Items:FireServer(unpack(args))
local args = {[1] = "TalentToken",[2] = 1}game:GetService("ReplicatedStorage").Remote.Drops.Items:FireServer(unpack(args))
local args = {[1] = "TalentToken",[2] = 1}game:GetService("ReplicatedStorage").Remote.Drops.Items:FireServer(unpack(args))
local args = {[1] = "TalentToken",[2] = 1}game:GetService("ReplicatedStorage").Remote.Drops.Items:FireServer(unpack(args))
local args = {[1] = "TalentToken",[2] = 1}game:GetService("ReplicatedStorage").Remote.Drops.Items:FireServer(unpack(args))
local args = {[1] = "TalentToken",[2] = 1}game:GetService("ReplicatedStorage").Remote.Drops.Items:FireServer(unpack(args))
local args = {[1] = "TalentToken",[2] = 1}game:GetService("ReplicatedStorage").Remote.Drops.Items:FireServer(unpack(args))
local args = {[1] = "TalentToken",[2] = 1}game:GetService("ReplicatedStorage").Remote.Drops.Items:FireServer(unpack(args))
 wait(0.5)
local args = {[1] = "JJK"}game:GetService("ReplicatedStorage").Remote.Player.Teleport:FireServer(unpack(args))
game:GetService("ReplicatedStorage").Remote.Drops.CaughtSpirit:FireServer()
game:GetService("ReplicatedStorage").Remote.Drops.CaughtSpirit:FireServer()
game:GetService("ReplicatedStorage").Remote.Drops.CaughtSpirit:FireServer()
game:GetService("ReplicatedStorage").Remote.Drops.CaughtSpirit:FireServer()
game:GetService("ReplicatedStorage").Remote.Drops.CaughtSpirit:FireServer()

local args = {[1] = "TalentToken",[2] = 1}game:GetService("ReplicatedStorage").Remote.Drops.Items:FireServer(unpack(args))
local args = {[1] = "TalentToken",[2] = 1}game:GetService("ReplicatedStorage").Remote.Drops.Items:FireServer(unpack(args))
local args = {[1] = "TalentToken",[2] = 1}game:GetService("ReplicatedStorage").Remote.Drops.Items:FireServer(unpack(args))
local args = {[1] = "TalentToken",[2] = 1}game:GetService("ReplicatedStorage").Remote.Drops.Items:FireServer(unpack(args))
local args = {[1] = "TalentToken",[2] = 1}game:GetService("ReplicatedStorage").Remote.Drops.Items:FireServer(unpack(args))
local args = {[1] = "TalentToken",[2] = 1}game:GetService("ReplicatedStorage").Remote.Drops.Items:FireServer(unpack(args))
local args = {[1] = "TalentToken",[2] = 1}game:GetService("ReplicatedStorage").Remote.Drops.Items:FireServer(unpack(args))
local args = {[1] = "TalentToken",[2] = 1}game:GetService("ReplicatedStorage").Remote.Drops.Items:FireServer(unpack(args))
local args = {[1] = "TalentToken",[2] = 1}game:GetService("ReplicatedStorage").Remote.Drops.Items:FireServer(unpack(args))
local args = {[1] = "TalentToken",[2] = 1}game:GetService("ReplicatedStorage").Remote.Drops.Items:FireServer(unpack(args))
        
        end
    end
})
local hatch = Window:MakeTab({
    Name = "Open Orbs",
    Icon = openimg,
    PremiumOnly = false
 })


local eqbest = client.PlayerGui.MainGui.Windows.Pets.BottomBar.BottomButtons.EquipBestButton

local eggs ={}
for _,v in pairs(game:GetService("ReplicatedStorage").ReplicatedAssets.Orbs:GetChildren()) do
    table.insert(eggs,v.Name)
end

local eggtoopen
hatch:AddDropdown({
	Name = "Select to Orb",
	Options = eggs,
	Callback = function(Option)
        eggtoopen = Option
	end,
})


local openegg
hatch:AddToggle({
	Name = "Open Orb (It Works Current World)",
    Default = false,
    Save = true,
	Callback = function(Value)
		openegg = Value
        if Value then
            spawn(function()
                openegg_func()
            end)
          end
	end,
})
local howmuch
    hatch:AddSlider({
    Name = "How many opens?",
    Min = 0,
    Max = 12,
    Default = 1,
    Color = Color3.fromRGB(255,255,255),
    Increment = 1,
    ValueName = "/s",
    Callback = function(dly1)
    howmuch = dly1
    end  
})
hatch:AddButton({
	Name = "Tp Orb",
	Callback = function(Value)
game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = game.Workspace.Worlds[client.World.Value][eggtoopen]["RootPart"].CFrame
	end,
})



function openegg_func()
    spawn(function()
        while wait(0.1) and openegg do
local args = {
[1] = workspace.Worlds[client.World.Value][eggtoopen],
[2] = howmuch
}
game:GetService("ReplicatedStorage").Remote.Orbs.OpenOrbs:FireServer(unpack(args))
        end
    end)
end

local dn = Window:MakeTab({
    Name = "Raid",
    Icon = dungeonimg,
    PremiumOnly = false
 }) 
dn:AddSection({
    Name = "Start Raid"
 })
local rd = {}
for _,v in pairs(game:GetService("ReplicatedStorage").UnloadedWorlds:GetChildren()) do
    table.insert(rd,v.Name)
end

local selectedsworld
dn:AddDropdown({
	Name = "Select to World",
	Options = rd,
	Callback = function(Option)
        selectedsworld = Option
	end,
})

local dif = {"Easy","Medium","Hard"}

local selecteddifficult
dn:AddDropdown({
	Name = "Select to Difficult",
	Options = dif,
	Callback = function(Option)
        selecteddifficult = Option
	end,
})

local rmms = {"Room1","Room2","Room3","Room4"}

local dngn
dn:AddDropdown({
	Name = "Select Room Numbers",
	Options = rmms,
	Callback = function(Option)
        dngn = Option
	end,
})
local rstraid
    dn:AddSlider({
    Name = "Restart Raid Delay",
    Min = 0,
    Max = 900,
    Default = 1,
    Color = Color3.fromRGB(255,255,255),
    Increment = 1,
    ValueName = "/s",
    Callback = function(dly1)
    rstraid = dly1
    end  
})
local function getClosestMob4()
    local dist, thing = math.huge
    for i, v in next, game:GetService("Workspace").Worlds[game.Players.LocalPlayer.World.Value]:GetDescendants() do
        if v.Name == "HumanoidRootPart" then
            local mag = (game.Players.LocalPlayer.Character.HumanoidRootPart.Position - v.Position).magnitude
            if mag < dist then
                dist = mag
                thing = v
            end
        end
    end
    if thing then
        return thing
    else
        return nil
    end
end

local raidchest = dn:AddToggle({
    Name = "Auto Farm Raid",
    Default = false,
    Save = true,
    Callback = function(Value)
        raidchest = Value
        while raidchest do
        cagans()
            task.wait()
            repeat
                task.wait()
            until game.Players.LocalPlayer.Character ~= nil
            local mobas4 = getClosestMob4()
            if mobas4 then
                local tweenInfo = TweenInfo.new(0.1, Enum.EasingStyle.Linear, Enum.EasingDirection.Out)
                local tween = game:GetService("TweenService"):Create(game.Players.LocalPlayer.Character.HumanoidRootPart, tweenInfo, {CFrame = mobas4.CFrame * CFrame.new(0,0,3)})
                tween:Play()
            end
        end
    end,
})
local autord = dn:AddToggle({
	Name = "Start Raid",
    Default = getgenv().AutoSaveSettings.AutoTeleportRaid,
    Save = true,
	Callback = function(Value)
	getgenv().AutoSaveSettings.AutoTeleportRaid = Value
        while task.wait() do 
           if getgenv().AutoSaveSettings.AutoTeleportRaid == true then 
            local args = {[1] = "Hub"}game:GetService("ReplicatedStorage").Remote.Player.Teleport:FireServer(unpack(args))
            wait(3)
            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = game.Workspace.Worlds.Hub.DungeonTemple["1"].RaidRooms[dngn].Door["Part2"].CFrame
            dungeon_func()
            wait(1)
            firesignal(client.PlayerGui.MainGui.HUD.BottomButtons.SideButtons.AutoAttack.Button.Activated)
           
           local textLabel = game.Players.LocalPlayer.PlayerGui.MainGui.HUD.RaidHUD.TimerDisplay.Timer
        if string.find(textLabel.Text, "0:00") then
              if getgenv().AutoSaveSettings.AutoTeleportRaid == true then  -- Boolean -- Boolean
              raidchest:Set(true)
        end 
             local args = {[1] = "Hub"}game:GetService("ReplicatedStorage").Remote.Player.Teleport:FireServer(unpack(args))
            wait(3)
            wait(100)
        end 
        
    else
        wait()
        return
    end 
    end
	end,
})

--[[
dn:AddToggle({
	Name = "Auto Attack Gamepass",
    Default = false,
    Save = true,
	Callback = function(Value)
	getgenv().AutoSaveSettings.Attack = Value
    firesignal(game.Players.LocalPlayer.PlayerGui.MainGui.HUD.BottomButtons.SideButtons.AutoAttack.Button.MouseButton1Click)
	end,
})
]]--

function dungeon_func()
    spawn(function()
        while wait(0.1) and getgenv().AutoSaveSettings.AutoTeleportRaid do
local args = {
    [1] = workspace.Worlds.Hub.DungeonTemple["1"].RaidRooms[dngn],
    [2] = true
}
game:GetService("ReplicatedStorage").Remote.Raid.SetInRaid:FireServer(unpack(args))
wait(1)
local args = {
[1] = workspace.Worlds.Hub.DungeonTemple["1"].RaidRooms[dngn],
[2] = "TargetWorld",
[3] = selectedsworld
}
game:GetService("ReplicatedStorage").Remote.Raid.SetRaidSetting:FireServer(unpack(args))     
wait(1)
local args = {
[1] = workspace.Worlds.Hub.DungeonTemple["1"].RaidRooms[dngn],
[2] = "Difficulty",
[3] = selecteddifficult
}
game:GetService("ReplicatedStorage").Remote.Raid.SetRaidSetting:FireServer(unpack(args))
local args = {
    [1] = workspace.Worlds.Hub.DungeonTemple["1"].RaidRooms[dngn]
}
game:GetService("ReplicatedStorage").Remote.Raid.StartRaid:FireServer(unpack(args))
        end
    end)
end
dn:AddToggle({
	Name = "Auto Restart Raid",
    Default = false,
    Save = true,
	Callback = function(Value)
    autfix2 = Value
while autfix2 do task.wait(rstraid)
local args = {[1] = "Hub"}game:GetService("ReplicatedStorage").Remote.Player.Teleport:FireServer(unpack(args))
wait(1)
autord:Set(false)
wait(0.5)
autord:Set(true)
end
	end,
})


--[[
local SetLabels = dn:AddLabel("Current Position To Set: None")

local Button = dn:AddButton({
    Name = "Set Your Position After Done Areas", -- String
    Callback = function()
    getgenv().AutoSaveSettings.SavedPosition = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame 
    game:GetService("StarterGui"):SetCore("SendNotification",{
       Title = "Position Alert", -- Required
       Text = "Successfully Set Your Current Position.", -- Required
    })
    print("Current Set Position: " ..  tostring(getgenv().AutoSaveSettings.SavedPosition))
    SetLabels:Set("Current Set Position: " .. game:GetService("Players").LocalPlayer.World.Value) -- String
end,
})

local Toggle = dn:AddToggle({
	Name = "Auto Teleport If Detected Raids", -- String
	Default =  getgenv().AutoSaveSettings.AutoTeleportRaid , -- Boolean
	Callback = function(bool)
        getgenv().AutoSaveSettings.AutoTeleportRaid = bool
        while task.wait() do 
           if getgenv().AutoSaveSettings.AutoTeleportRaid == true then 
        local textLabel = game.Players.LocalPlayer.PlayerGui.MainGui.HUD.RaidHUD.TimerDisplay.Timer
        

        
        if string.find(textLabel.Text, "0:00") then
        wait(1)
   if getgenv().AutoSaveSettings.Attack == true and getgenv().AutoSaveSettings.Teleport  == true then 
            autotpmob:Set(false) -- Boolean -- Boolean
        end 
        
            wait(2)
             local args = {[1] = "Hub"}game:GetService("ReplicatedStorage").Remote.Player.Teleport:FireServer(unpack(args))
            wait(3)


            wait(100)
        end 
    else
        wait()
        break
    end 
end 
    end,
})

local Toggle = dn:AddToggle({
	Name = "AutoFarm Raids", -- String
	Default =  getgenv().AutoSaveSettings.AutoFarmRaidNamek, -- Boolean
	Callback = function(bool)

  
        getgenv().AutoSaveSettings.AutoFarmRaidNamek  = bool 
 while task.wait() do 
    if   getgenv().AutoSaveSettings.AutoFarmRaidNamek  == true then 
        pcall(function()
     local character = game.Players.LocalPlayer.Character
     local rootPart = character:FindFirstChildOfClass("Part")
     local closestEnemy
     local closestDistance = math.huge
     local enemyName
     local bossDummy = game:GetService("Workspace").Worlds.Raids.Enemies

     for _, zone in pairs(game:GetService("Workspace").Worlds.Raids:GetChildren()) do
         if zone:FindFirstChild("Enemies") then
             for _, enemy in pairs(zone.Enemies:GetChildren()) do
                 local distance = (rootPart.Position - enemy:WaitForChild("HumanoidRootPart").Position).magnitude
                 if distance < closestDistance then
                     closestDistance = distance
                     closestEnemy = enemy
                     enemyName = enemy.Name
                 end
             end
         end
     end
         
     if closestEnemy and not game:GetService("Workspace").Worlds.Raids.Enemies then -- find closest enemies 
         rootPart.CFrame = closestEnemy:FindFirstChildOfClass("HumanoidRootPart").CFrame * CFrame.new(0, 0, 3)
        wait(3)
             task.wait(.5)
     
         --  \\ Back To Saved Pos // -- 
     task.wait(.5)
     game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = getgenv().AutoSaveSettings.SavedPosition
     if getgenv().AutoSaveSettings.Attack == false and getgenv().AutoSaveSettings.Teleport == false then 
     autotpmob:Set(true) -- Boolean-- Boolean
  end 
end
     task.wait(math.huge)
     end)
    else
     wait()
     break
 end 
    end 
        end,
    })
]]--


local tw = Window:MakeTab({
    Name = "Tower",
    Icon = "rbxassetid://14916295920",
    PremiumOnly = false
 }) 

function autoattack()
    local button = game:service'VirtualInputManager'
    local X, Y = 682, 376
    
    button:SendMouseButtonEvent(X, Y, 0, true, game, 1)
    button:SendMouseButtonEvent(X, Y, 0, false, game, 1)
    wait(3)
end

local dl1 
    tw:AddSlider({
    Name = "Auto Start Delay",
    Min = 0,
    Max = 500,
    Default = 50,
    Color = Color3.fromRGB(255,255,255),
    Increment = 1,
    ValueName = "/s",
    Callback = function(dly1)
    dl1 = dly1
    end  
})

tw:AddToggle({
    Name = "Auto Start Tower",
    Default = false,
    Save = true,
    Callback = function(Value)
        sttw = Value
        firesignal(client.PlayerGui.MainGui.HUD.BottomButtons.SideButtons.AutoAttack.Button.Activated)
        while sttw do 
game:GetService("ReplicatedStorage").Remote.Tower.StartTower:FireServer()
wait(1)
autclick:Set(true)
wait(1)
wait(dl1)
local textLabel2 = client.PlayerGui.MainGui.HUD.TowerHUD.TimerDisplay.TimerValue
        if string.find(textLabel2.Text, "0:00") then
             local args = {[1] = "Hub"}game:GetService("ReplicatedStorage").Remote.Player.Teleport:FireServer(unpack(args))
            wait(3)
        end 
        end
    end,
})

local function getClosestMob()
    local dist, thing = math.huge
    for i, v in next, game:GetService("Workspace").Worlds[game.Players.LocalPlayer.World.Value]:GetDescendants() do
        if v.Name == "HumanoidRootPart" then
            local mag = (game.Players.LocalPlayer.Character.HumanoidRootPart.Position - v.Position).magnitude
            if mag < dist then
                dist = mag
                thing = v
            end
        end
    end
    if thing then
        return thing
    else
        return nil
    end
end
tw:AddToggle({
    Name = "Auto Farm Tower",
    Default = false,
    Save = true,
    Callback = function(Value)
        ba = Value
        while ba do
        cagans()
            task.wait()
            repeat
                task.wait()
            until game.Players.LocalPlayer.Character ~= nil
            local moba = getClosestMob()
            if moba then
                local tweenInfo = TweenInfo.new(1, Enum.EasingStyle.Linear, Enum.EasingDirection.Out)
                local tween = game:GetService("TweenService"):Create(game.Players.LocalPlayer.Character.HumanoidRootPart, tweenInfo, {CFrame = moba.CFrame * CFrame.new(0,0,2)})
                tween:Play()
            end
        end
    end,
})

local p = game.Players.LocalPlayer.PlayerGui.MainGui

local ggui = Window:MakeTab({
    Name = "GUI",
    Icon = guiimg,
    PremiumOnly = false
 }) 

local gui ={}
for _,v in pairs(client.PlayerGui.MainGui.Windows:GetChildren()) do
    table.insert(gui,v.Name)
end

local openthegui
ggui:AddDropdown({
	Name = "Select to Gui",
	Options = gui,
	Callback = function(Option)
        openthegui = Option
	end,
})

ggui:AddToggle({
	Name = "Open Selected Gui",
    Default = false,
	Callback = function(Value)
		opengui = Value
        if Value then
            spawn(function()
                opengui_func()
            end)
        end
	end,
})

ggui:AddToggle({
	Name = "Close Selected Gui",
    Default = false,
	Callback = function(Value)
		opengui2 = Value
        if Value then
            spawn(function()
                opengui_func2()
            end)
        end
	end,
})

function opengui_func()
    spawn(function()
    client.PlayerGui.MainGui.Windows[openthegui].Visible = true
    end)
end

function opengui_func2()
    spawn(function()
    client.PlayerGui.MainGui.Windows[openthegui].Visible = false
    end)
end

local displayNameToWorldName = {}
local ttp = Window:MakeTab({
    Name = "Teleport",
    Icon = teleportimg,
    PremiumOnly = false
 }) 
 ttp:AddSection({
    Name = "TELEPORT : "

}) 
local tab = {}
for worldName, info in pairs(worldData) do
    if not table.find(IGNORED_WORLDS, worldName) then
        displayNameToWorldName[info.DisplayName] = worldName
        table.insert(tab, info)
    end
end

table.sort(tab, function(a, b)
    return a.PurchasePrice < b.PurchasePrice
end)

for _, info in ipairs(tab) do
    ttp:AddButton({
        Name = info.DisplayName,
        Default = false,
        Callback = function()
            local world = displayNameToWorldName[info.DisplayName]
            REMOTE.Player.Teleport:FireServer(world)
        end
    })
end

local Player = Window:MakeTab({
    Name = "Local Player",
    Icon = universalimg,
    PremiumOnly = false
})
Player:AddParagraph("Local Player ","Speed ")
Player:AddSlider({
    Name = "Walkspeed",
    Min = 0,
    Max = 500,
    Default = 50,
    Color = Color3.fromRGB(255,255,255),
    Increment = 1,
    ValueName = "Speeds",
    Callback = function(s)
        game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = s

    end  
})
Player:AddSlider({
    Name = "JumpPower",
    Min = 0,
    Max = 500,
    Default = false,
    Color = Color3.fromRGB(255,255,255),
    Increment = 1,
    ValueName = "Powers",
    Callback = function(s)
        game.Players.LocalPlayer.Character.Humanoid.JumpPower = s
    end  
})
local misc = Window:MakeTab({
    Name = "Misc",
    Icon = settingimg,
    PremiumOnly = false
 })
misc:AddSection({
    Name = "Server Misc"
})
misc:AddParagraph("Anti Afk NOTIFICATION"," Script Will Auto anti afk when you excute  !")
 function antiAFK()
    player.Idled:Connect(function()
        VU:Button2Down(Vector2.new(0,0),workspace.CurrentCamera.CFrame)
        task.wait(1)
        VU:Button2Up(Vector2.new(0,0),workspace.CurrentCamera.CFrame)
    end)
end
    antiAFK()
function CopyjobID()
    local JobId = game.JobId

    setclipboard(JobId)
end
local whitescreen = false
misc:AddToggle({
    Name = "White Screen ",
    Default = false,
    Callback = function (tooglestate)
        whitescreen = tooglestate
if whitescreen == true then
        game:GetService("RunService"):Set3dRenderingEnabled(false)
        elseif whitescreen == false  then
            game:GetService("RunService"):Set3dRenderingEnabled(true)

    end
end

})

misc:AddButton({
    Name = "Hop Sever ",
    Default = false,
    Callback = function()
        local Player = game.Players.LocalPlayer    
        local Http = game:GetService("HttpService")
        local TPS = game:GetService("TeleportService")
        local Api = "https://games.roblox.com/v1/games/"

        local _place,_id = game.PlaceId, game.JobId
        local _servers = Api.._place.."/servers/Public?sortOrder=Asc&limit=10"
        function ListServers(cursor)
           local Raw = game:HttpGet(_servers .. ((cursor and "&cursor="..cursor) or ""))
           return Http:JSONDecode(Raw)
        end

        time_to_wait = 3 
        while wait(time_to_wait) do
           Player.Character.HumanoidRootPart.Anchored = true
           local Servers = ListServers()
           local Server = Servers.data[math.random(1,#Servers.data)]
           TPS:TeleportToPlaceInstance(_place, Server.id, Player)
        end
            perfectushub:MakeNotification({
                Name = "success Copy",
                Content = "Copy Your JobID",
                Image = "rbxassetid://14887567417",
                Time = 5
            })
   end
})
misc:AddButton({
    Name = "Copy JobID Sever",
    Default = false,
    Callback = function()
            CopyjobID()
            perfectushub:MakeNotification({
                Name = "success Copy",
                Content = "Copy Your JobID",
                Image = "rbxassetid://14887567417",
                Time = 5
            })
   end
})
misc:AddTextbox({
    Name = "Type Your JobID And Enter",
    Default = false,
    TextDisappear = true,
    Callback = function(vew)
        Players = game:GetService("Players")

        PlaceId, JobId = game.PlaceId, vew  
TeleportService = game:GetService("TeleportService")
TeleportService:TeleportToPlaceInstance(PlaceId, JobId, Players.LocalPlayer)
    end	  
})
 misc:AddSection({
    Name = "Save + Load Config"
})
misc:AddButton({
    Name = "Save ConFig !",
    Callback = function()
     perfectushub:SaveCfg("Perfectus hub")
            perfectushub:MakeNotification({
                Name = "Success Save ConFig",
                Content = "If you want use this config just load it",
                Image = "rbxassetid://14887567417",
                Time = 5
            })
      end    
})
misc:AddButton({
    Name = "Load ConFig !",
    Callback = function()
        perfectushub:Init()
      end    
})
local Credit = Window:MakeTab({
	Name = "Discord",
	Icon = discordimg,
	PremiumOnly = false
	})
	Credit:AddLabel("Click To Copy")
	Credit:AddButton({
		Name = " Copy Discord Server Link ",
		Callback = function()
			local serverLink = "https://discord.gg/RVnjYRWNA9" -- Thay xxxxxxxxxx bằng mã link server Discord của bạn
			setclipboard(serverLink) 
			local success = true
			if success then
				perfectushub:MakeNotification({
					Name = "Copy To clipboard",
					Content = "Let Join DISCORD SEVER ( Perfectus Hub | COMMUNITY )",
					Image = "rbxassetid://14887567417",
					Time = 5
				})
			end
		end
	})   
else

perfectushub:MakeNotification({
Name = "DONT SUPPORT THIS GAME",
Content = "Check STATUS ON DISCORD SEVER ( Perfectus Hub | COMMUNITY )",
Image = "rbxassetid://14887567417",
Time = 10
})


perfectushub:Init()
end

wait(1)

game:GetService("StarterGui"):SetCore("SendNotification",{
	Title = "Perfectus Hub", -- Required
	Text = "Loaded", -- Required
	Icon = "rbxassetid://14887567417" -- Optional
})
